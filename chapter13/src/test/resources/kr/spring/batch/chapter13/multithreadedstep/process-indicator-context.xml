<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/batch
       http://www.springframework.org/schema/batch/spring-batch.xsd
       http://www.springframework.org/schema/data/jpa
       http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">

	<import resource="classpath:spring/infrastructure-batch.xml"/>
	<import resource="classpath:spring/infrastructure-jpa.xml"/>

	<bean id="jobLauncherTestUtils" class="org.springframework.batch.test.JobLauncherTestUtils"/>

	<jpa:repositories base-package="kr.spring.batch.chapter13.repository"/>

	<batch:job id="readWriteMultiThreadJob">
		<batch:step id="readWriteMultiThreadedStep">
			<batch:tasklet task-executor="taskExecutor">
				<batch:chunk reader="productItemReader" writer="productItemWriter" commit-interval="20"/>
			</batch:tasklet>
		</batch:step>
	</batch:job>

	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="8"/>
		<property name="maxPoolSize" value="8"/>
		<property name="waitForTasksToCompleteOnShutdown" value="true"/>
		<property name="queueCapacity" value="24"/>
	</bean>

	<!-- Thread-safe 한 ItemReader 를 제공하기 위해 Wrapping 을 합니다. -->
	<bean id="productItemReader" class="kr.spring.batch.chapter13.multithreadedstep.SynchronizingItemReader">
		<property name="delegate" ref="targetProductItemReader2"/>
	</bean>

	<bean id="targetProductItemReader" class="org.springframework.batch.item.database.JdbcCursorItemReader">
		<property name="dataSource" ref="dataSource"/>
		<property name="sql"
		          value="select id,name,description,price from Product where processed=false"/>
		<property name="saveState" value="false"/>
		<property name="rowMapper" ref="productRowMapper"/>
		<property name="verifyCursorPosition" value="false"/>
		<property name="fetchSize" value="10"/>
	</bean>

	<bean id="targetProductItemReader2" class="org.springframework.batch.item.database.JpaPagingItemReader">
		<property name="entityManagerFactory" ref="entityManagerFactory"/>
		<property name="queryString" value="select p from Product p where p.processed=false"/>
		<!-- Chunk Size 와 같거나 작아야 됩니다. -->
		<property name="pageSize" value="10"/>
		<property name="saveState" value="false"/>
		<property name="transacted" value="false"/>
	</bean>

	<bean id="productRowMapper" class="kr.spring.batch.chapter13.ProductRowMapper"/>

	<bean id="productItemWriter" class="kr.spring.batch.chapter13.multithreadedstep.ProductItemWriter">
		<property name="productRepository" ref="productRepository"/>
	</bean>

</beans>